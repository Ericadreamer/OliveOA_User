package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.AnnouncementInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANNOUNCEMENT_INFO".
*/
public class AnnouncementInfoDao extends AbstractDao<AnnouncementInfo, Void> {

    public static final String TABLENAME = "ANNOUNCEMENT_INFO";

    /**
     * Properties of entity AnnouncementInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Aid = new Property(0, String.class, "aid", false, "AID");
        public final static Property Eid = new Property(1, String.class, "eid", false, "EID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Signature = new Property(4, String.class, "signature", false, "SIGNATURE");
        public final static Property Publishtime = new Property(5, long.class, "publishtime", false, "PUBLISHTIME");
        public final static Property Isapproved = new Property(6, int.class, "isapproved", false, "ISAPPROVED");
        public final static Property Orderby = new Property(7, int.class, "orderby", false, "ORDERBY");
        public final static Property Createtime = new Property(8, long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(9, long.class, "updatetime", false, "UPDATETIME");
    }


    public AnnouncementInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AnnouncementInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANNOUNCEMENT_INFO\" (" + //
                "\"AID\" TEXT," + // 0: aid
                "\"EID\" TEXT," + // 1: eid
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"SIGNATURE\" TEXT," + // 4: signature
                "\"PUBLISHTIME\" INTEGER NOT NULL ," + // 5: publishtime
                "\"ISAPPROVED\" INTEGER NOT NULL ," + // 6: isapproved
                "\"ORDERBY\" INTEGER NOT NULL ," + // 7: orderby
                "\"CREATETIME\" INTEGER NOT NULL ," + // 8: createtime
                "\"UPDATETIME\" INTEGER NOT NULL );"); // 9: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANNOUNCEMENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnnouncementInfo entity) {
        stmt.clearBindings();
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(1, aid);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(2, eid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
        stmt.bindLong(6, entity.getPublishtime());
        stmt.bindLong(7, entity.getIsapproved());
        stmt.bindLong(8, entity.getOrderby());
        stmt.bindLong(9, entity.getCreatetime());
        stmt.bindLong(10, entity.getUpdatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnnouncementInfo entity) {
        stmt.clearBindings();
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(1, aid);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(2, eid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
        stmt.bindLong(6, entity.getPublishtime());
        stmt.bindLong(7, entity.getIsapproved());
        stmt.bindLong(8, entity.getOrderby());
        stmt.bindLong(9, entity.getCreatetime());
        stmt.bindLong(10, entity.getUpdatetime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AnnouncementInfo readEntity(Cursor cursor, int offset) {
        AnnouncementInfo entity = new AnnouncementInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // aid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signature
            cursor.getLong(offset + 5), // publishtime
            cursor.getInt(offset + 6), // isapproved
            cursor.getInt(offset + 7), // orderby
            cursor.getLong(offset + 8), // createtime
            cursor.getLong(offset + 9) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnnouncementInfo entity, int offset) {
        entity.setAid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublishtime(cursor.getLong(offset + 5));
        entity.setIsapproved(cursor.getInt(offset + 6));
        entity.setOrderby(cursor.getInt(offset + 7));
        entity.setCreatetime(cursor.getLong(offset + 8));
        entity.setUpdatetime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AnnouncementInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AnnouncementInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(AnnouncementInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
