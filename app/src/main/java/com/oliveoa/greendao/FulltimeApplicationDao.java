package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.FulltimeApplication;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FULLTIME_APPLICATION".
*/
public class FulltimeApplicationDao extends AbstractDao<FulltimeApplication, Void> {

    public static final String TABLENAME = "FULLTIME_APPLICATION";

    /**
     * Properties of entity FulltimeApplication.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Faid = new Property(0, String.class, "faid", false, "FAID");
        public final static Property Eid = new Property(1, String.class, "eid", false, "EID");
        public final static Property Begintime = new Property(2, long.class, "begintime", false, "BEGINTIME");
        public final static Property Endtime = new Property(3, long.class, "endtime", false, "ENDTIME");
        public final static Property PersonalSummary = new Property(4, String.class, "personalSummary", false, "PERSONAL_SUMMARY");
        public final static Property Orderby = new Property(5, Integer.class, "orderby", false, "ORDERBY");
        public final static Property Createtime = new Property(6, long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(7, long.class, "updatetime", false, "UPDATETIME");
    }


    public FulltimeApplicationDao(DaoConfig config) {
        super(config);
    }
    
    public FulltimeApplicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FULLTIME_APPLICATION\" (" + //
                "\"FAID\" TEXT," + // 0: faid
                "\"EID\" TEXT," + // 1: eid
                "\"BEGINTIME\" INTEGER NOT NULL ," + // 2: begintime
                "\"ENDTIME\" INTEGER NOT NULL ," + // 3: endtime
                "\"PERSONAL_SUMMARY\" TEXT," + // 4: personalSummary
                "\"ORDERBY\" INTEGER," + // 5: orderby
                "\"CREATETIME\" INTEGER NOT NULL ," + // 6: createtime
                "\"UPDATETIME\" INTEGER NOT NULL );"); // 7: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FULLTIME_APPLICATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FulltimeApplication entity) {
        stmt.clearBindings();
 
        String faid = entity.getFaid();
        if (faid != null) {
            stmt.bindString(1, faid);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(2, eid);
        }
        stmt.bindLong(3, entity.getBegintime());
        stmt.bindLong(4, entity.getEndtime());
 
        String personalSummary = entity.getPersonalSummary();
        if (personalSummary != null) {
            stmt.bindString(5, personalSummary);
        }
 
        Integer orderby = entity.getOrderby();
        if (orderby != null) {
            stmt.bindLong(6, orderby);
        }
        stmt.bindLong(7, entity.getCreatetime());
        stmt.bindLong(8, entity.getUpdatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FulltimeApplication entity) {
        stmt.clearBindings();
 
        String faid = entity.getFaid();
        if (faid != null) {
            stmt.bindString(1, faid);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(2, eid);
        }
        stmt.bindLong(3, entity.getBegintime());
        stmt.bindLong(4, entity.getEndtime());
 
        String personalSummary = entity.getPersonalSummary();
        if (personalSummary != null) {
            stmt.bindString(5, personalSummary);
        }
 
        Integer orderby = entity.getOrderby();
        if (orderby != null) {
            stmt.bindLong(6, orderby);
        }
        stmt.bindLong(7, entity.getCreatetime());
        stmt.bindLong(8, entity.getUpdatetime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FulltimeApplication readEntity(Cursor cursor, int offset) {
        FulltimeApplication entity = new FulltimeApplication( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // faid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eid
            cursor.getLong(offset + 2), // begintime
            cursor.getLong(offset + 3), // endtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // personalSummary
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // orderby
            cursor.getLong(offset + 6), // createtime
            cursor.getLong(offset + 7) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FulltimeApplication entity, int offset) {
        entity.setFaid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBegintime(cursor.getLong(offset + 2));
        entity.setEndtime(cursor.getLong(offset + 3));
        entity.setPersonalSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderby(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreatetime(cursor.getLong(offset + 6));
        entity.setUpdatetime(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FulltimeApplication entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FulltimeApplication entity) {
        return null;
    }

    @Override
    public boolean hasKey(FulltimeApplication entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
