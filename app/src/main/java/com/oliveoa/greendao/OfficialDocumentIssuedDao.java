package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.OfficialDocumentIssued;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFICIAL_DOCUMENT_ISSUED".
*/
public class OfficialDocumentIssuedDao extends AbstractDao<OfficialDocumentIssued, Void> {

    public static final String TABLENAME = "OFFICIAL_DOCUMENT_ISSUED";

    /**
     * Properties of entity OfficialDocumentIssued.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Odiid = new Property(0, String.class, "odiid", false, "ODIID");
        public final static Property Oiid = new Property(1, String.class, "oiid", false, "OIID");
        public final static Property Dcid = new Property(2, String.class, "dcid", false, "DCID");
        public final static Property Isreceive = new Property(3, Integer.class, "isreceive", false, "ISRECEIVE");
        public final static Property Orderby = new Property(4, Integer.class, "orderby", false, "ORDERBY");
        public final static Property Createtime = new Property(5, long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(6, long.class, "updatetime", false, "UPDATETIME");
    }


    public OfficialDocumentIssuedDao(DaoConfig config) {
        super(config);
    }
    
    public OfficialDocumentIssuedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFICIAL_DOCUMENT_ISSUED\" (" + //
                "\"ODIID\" TEXT," + // 0: odiid
                "\"OIID\" TEXT," + // 1: oiid
                "\"DCID\" TEXT," + // 2: dcid
                "\"ISRECEIVE\" INTEGER," + // 3: isreceive
                "\"ORDERBY\" INTEGER," + // 4: orderby
                "\"CREATETIME\" INTEGER NOT NULL ," + // 5: createtime
                "\"UPDATETIME\" INTEGER NOT NULL );"); // 6: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFICIAL_DOCUMENT_ISSUED\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OfficialDocumentIssued entity) {
        stmt.clearBindings();
 
        String odiid = entity.getOdiid();
        if (odiid != null) {
            stmt.bindString(1, odiid);
        }
 
        String oiid = entity.getOiid();
        if (oiid != null) {
            stmt.bindString(2, oiid);
        }
 
        String dcid = entity.getDcid();
        if (dcid != null) {
            stmt.bindString(3, dcid);
        }
 
        Integer isreceive = entity.getIsreceive();
        if (isreceive != null) {
            stmt.bindLong(4, isreceive);
        }
 
        Integer orderby = entity.getOrderby();
        if (orderby != null) {
            stmt.bindLong(5, orderby);
        }
        stmt.bindLong(6, entity.getCreatetime());
        stmt.bindLong(7, entity.getUpdatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OfficialDocumentIssued entity) {
        stmt.clearBindings();
 
        String odiid = entity.getOdiid();
        if (odiid != null) {
            stmt.bindString(1, odiid);
        }
 
        String oiid = entity.getOiid();
        if (oiid != null) {
            stmt.bindString(2, oiid);
        }
 
        String dcid = entity.getDcid();
        if (dcid != null) {
            stmt.bindString(3, dcid);
        }
 
        Integer isreceive = entity.getIsreceive();
        if (isreceive != null) {
            stmt.bindLong(4, isreceive);
        }
 
        Integer orderby = entity.getOrderby();
        if (orderby != null) {
            stmt.bindLong(5, orderby);
        }
        stmt.bindLong(6, entity.getCreatetime());
        stmt.bindLong(7, entity.getUpdatetime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OfficialDocumentIssued readEntity(Cursor cursor, int offset) {
        OfficialDocumentIssued entity = new OfficialDocumentIssued( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // odiid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // oiid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dcid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // isreceive
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // orderby
            cursor.getLong(offset + 5), // createtime
            cursor.getLong(offset + 6) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OfficialDocumentIssued entity, int offset) {
        entity.setOdiid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOiid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDcid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsreceive(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrderby(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCreatetime(cursor.getLong(offset + 5));
        entity.setUpdatetime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OfficialDocumentIssued entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OfficialDocumentIssued entity) {
        return null;
    }

    @Override
    public boolean hasKey(OfficialDocumentIssued entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
