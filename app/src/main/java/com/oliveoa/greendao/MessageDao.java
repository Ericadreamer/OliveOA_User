package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Void> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mid = new Property(0, String.class, "mid", false, "MID");
        public final static Property Seid = new Property(1, String.class, "seid", false, "SEID");
        public final static Property Eid = new Property(2, String.class, "eid", false, "EID");
        public final static Property Msg = new Property(3, String.class, "msg", false, "MSG");
        public final static Property Orderby = new Property(4, int.class, "orderby", false, "ORDERBY");
        public final static Property Createtime = new Property(5, long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(6, long.class, "updatetime", false, "UPDATETIME");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"MID\" TEXT," + // 0: mid
                "\"SEID\" TEXT," + // 1: seid
                "\"EID\" TEXT," + // 2: eid
                "\"MSG\" TEXT," + // 3: msg
                "\"ORDERBY\" INTEGER NOT NULL ," + // 4: orderby
                "\"CREATETIME\" INTEGER NOT NULL ," + // 5: createtime
                "\"UPDATETIME\" INTEGER NOT NULL );"); // 6: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
 
        String seid = entity.getSeid();
        if (seid != null) {
            stmt.bindString(2, seid);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(3, eid);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getOrderby());
        stmt.bindLong(6, entity.getCreatetime());
        stmt.bindLong(7, entity.getUpdatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(1, mid);
        }
 
        String seid = entity.getSeid();
        if (seid != null) {
            stmt.bindString(2, seid);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(3, eid);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getOrderby());
        stmt.bindLong(6, entity.getCreatetime());
        stmt.bindLong(7, entity.getUpdatetime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // seid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // eid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg
            cursor.getInt(offset + 4), // orderby
            cursor.getLong(offset + 5), // createtime
            cursor.getLong(offset + 6) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setMid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSeid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderby(cursor.getInt(offset + 4));
        entity.setCreatetime(cursor.getLong(offset + 5));
        entity.setUpdatetime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Message entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Message entity) {
        return null;
    }

    @Override
    public boolean hasKey(Message entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
