package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.MeetingApplicationAndStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEETING_APPLICATION_AND_STATUS".
*/
public class MeetingApplicationAndStatusDao extends AbstractDao<MeetingApplicationAndStatus, Void> {

    public static final String TABLENAME = "MEETING_APPLICATION_AND_STATUS";

    /**
     * Properties of entity MeetingApplicationAndStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Maid = new Property(0, String.class, "maid", false, "MAID");
        public final static Property Theme = new Property(1, String.class, "theme", false, "THEME");
        public final static Property Starttime = new Property(2, String.class, "starttime", false, "STARTTIME");
        public final static Property Endtime = new Property(3, String.class, "endtime", false, "ENDTIME");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
    }


    public MeetingApplicationAndStatusDao(DaoConfig config) {
        super(config);
    }
    
    public MeetingApplicationAndStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEETING_APPLICATION_AND_STATUS\" (" + //
                "\"MAID\" TEXT," + // 0: maid
                "\"THEME\" TEXT," + // 1: theme
                "\"STARTTIME\" TEXT," + // 2: starttime
                "\"ENDTIME\" TEXT," + // 3: endtime
                "\"STATUS\" INTEGER NOT NULL );"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEETING_APPLICATION_AND_STATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeetingApplicationAndStatus entity) {
        stmt.clearBindings();
 
        String maid = entity.getMaid();
        if (maid != null) {
            stmt.bindString(1, maid);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(2, theme);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(3, starttime);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(4, endtime);
        }
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeetingApplicationAndStatus entity) {
        stmt.clearBindings();
 
        String maid = entity.getMaid();
        if (maid != null) {
            stmt.bindString(1, maid);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(2, theme);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(3, starttime);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(4, endtime);
        }
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MeetingApplicationAndStatus readEntity(Cursor cursor, int offset) {
        MeetingApplicationAndStatus entity = new MeetingApplicationAndStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // maid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // theme
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // starttime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endtime
            cursor.getInt(offset + 4) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeetingApplicationAndStatus entity, int offset) {
        entity.setMaid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTheme(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStarttime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MeetingApplicationAndStatus entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MeetingApplicationAndStatus entity) {
        return null;
    }

    @Override
    public boolean hasKey(MeetingApplicationAndStatus entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
