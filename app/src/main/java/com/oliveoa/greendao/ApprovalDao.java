package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.Approval;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPROVAL".
*/
public class ApprovalDao extends AbstractDao<Approval, Void> {

    public static final String TABLENAME = "APPROVAL";

    /**
     * Properties of entity Approval.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Aid = new Property(0, String.class, "aid", false, "AID");
        public final static Property Seid = new Property(1, String.class, "seid", false, "SEID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
    }


    public ApprovalDao(DaoConfig config) {
        super(config);
    }
    
    public ApprovalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPROVAL\" (" + //
                "\"AID\" TEXT," + // 0: aid
                "\"SEID\" TEXT," + // 1: seid
                "\"CONTENT\" TEXT," + // 2: content
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"STATUS\" INTEGER NOT NULL );"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPROVAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Approval entity) {
        stmt.clearBindings();
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(1, aid);
        }
 
        String seid = entity.getSeid();
        if (seid != null) {
            stmt.bindString(2, seid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Approval entity) {
        stmt.clearBindings();
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(1, aid);
        }
 
        String seid = entity.getSeid();
        if (seid != null) {
            stmt.bindString(2, seid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Approval readEntity(Cursor cursor, int offset) {
        Approval entity = new Approval( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // aid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // seid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Approval entity, int offset) {
        entity.setAid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSeid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Approval entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Approval entity) {
        return null;
    }

    @Override
    public boolean hasKey(Approval entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
