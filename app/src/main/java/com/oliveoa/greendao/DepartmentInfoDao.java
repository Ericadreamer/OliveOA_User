package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.DepartmentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT_INFO".
*/
public class DepartmentInfoDao extends AbstractDao<DepartmentInfo, Void> {

    public static final String TABLENAME = "DEPARTMENT_INFO";

    /**
     * Properties of entity DepartmentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dcid = new Property(0, String.class, "dcid", false, "DCID");
        public final static Property Dpid = new Property(1, String.class, "dpid", false, "DPID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Telephone = new Property(4, String.class, "telephone", false, "TELEPHONE");
        public final static Property Fax = new Property(5, String.class, "fax", false, "FAX");
        public final static Property Orderby = new Property(6, int.class, "orderby", false, "ORDERBY");
        public final static Property Createtime = new Property(7, Long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(8, Long.class, "updatetime", false, "UPDATETIME");
    }


    public DepartmentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT_INFO\" (" + //
                "\"DCID\" TEXT," + // 0: dcid
                "\"DPID\" TEXT," + // 1: dpid
                "\"ID\" TEXT," + // 2: id
                "\"NAME\" TEXT," + // 3: name
                "\"TELEPHONE\" TEXT," + // 4: telephone
                "\"FAX\" TEXT," + // 5: fax
                "\"ORDERBY\" INTEGER NOT NULL ," + // 6: orderby
                "\"CREATETIME\" INTEGER," + // 7: createtime
                "\"UPDATETIME\" INTEGER);"); // 8: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepartmentInfo entity) {
        stmt.clearBindings();
 
        String dcid = entity.getDcid();
        if (dcid != null) {
            stmt.bindString(1, dcid);
        }
 
        String dpid = entity.getDpid();
        if (dpid != null) {
            stmt.bindString(2, dpid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(5, telephone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(6, fax);
        }
        stmt.bindLong(7, entity.getOrderby());
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(8, createtime);
        }
 
        Long updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindLong(9, updatetime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepartmentInfo entity) {
        stmt.clearBindings();
 
        String dcid = entity.getDcid();
        if (dcid != null) {
            stmt.bindString(1, dcid);
        }
 
        String dpid = entity.getDpid();
        if (dpid != null) {
            stmt.bindString(2, dpid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(5, telephone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(6, fax);
        }
        stmt.bindLong(7, entity.getOrderby());
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(8, createtime);
        }
 
        Long updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindLong(9, updatetime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DepartmentInfo readEntity(Cursor cursor, int offset) {
        DepartmentInfo entity = new DepartmentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dcid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dpid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // telephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fax
            cursor.getInt(offset + 6), // orderby
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // createtime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepartmentInfo entity, int offset) {
        entity.setDcid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDpid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFax(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderby(cursor.getInt(offset + 6));
        entity.setCreatetime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUpdatetime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DepartmentInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DepartmentInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(DepartmentInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
