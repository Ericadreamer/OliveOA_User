package com.oliveoa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oliveoa.pojo.OfficialDocument;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFICIAL_DOCUMENT".
*/
public class OfficialDocumentDao extends AbstractDao<OfficialDocument, Void> {

    public static final String TABLENAME = "OFFICIAL_DOCUMENT";

    /**
     * Properties of entity OfficialDocument.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Odid = new Property(0, String.class, "odid", false, "ODID");
        public final static Property DraftEid = new Property(1, String.class, "draftEid", false, "DRAFT_EID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Fid = new Property(3, String.class, "fid", false, "FID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property NuclearDraftEid = new Property(5, String.class, "nuclearDraftEid", false, "NUCLEAR_DRAFT_EID");
        public final static Property NuclearDraftIsapproved = new Property(6, int.class, "nuclearDraftIsapproved", false, "NUCLEAR_DRAFT_ISAPPROVED");
        public final static Property NuclearDraftOpinion = new Property(7, String.class, "nuclearDraftOpinion", false, "NUCLEAR_DRAFT_OPINION");
        public final static Property IssuedEid = new Property(8, String.class, "issuedEid", false, "ISSUED_EID");
        public final static Property IssuedIsapproved = new Property(9, int.class, "issuedIsapproved", false, "ISSUED_ISAPPROVED");
        public final static Property IssuedOpinion = new Property(10, String.class, "issuedOpinion", false, "ISSUED_OPINION");
        public final static Property Orderby = new Property(11, int.class, "orderby", false, "ORDERBY");
        public final static Property Createtime = new Property(12, long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(13, long.class, "updatetime", false, "UPDATETIME");
    }


    public OfficialDocumentDao(DaoConfig config) {
        super(config);
    }
    
    public OfficialDocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFICIAL_DOCUMENT\" (" + //
                "\"ODID\" TEXT," + // 0: odid
                "\"DRAFT_EID\" TEXT," + // 1: draftEid
                "\"CONTENT\" TEXT," + // 2: content
                "\"FID\" TEXT," + // 3: fid
                "\"TITLE\" TEXT," + // 4: title
                "\"NUCLEAR_DRAFT_EID\" TEXT," + // 5: nuclearDraftEid
                "\"NUCLEAR_DRAFT_ISAPPROVED\" INTEGER NOT NULL ," + // 6: nuclearDraftIsapproved
                "\"NUCLEAR_DRAFT_OPINION\" TEXT," + // 7: nuclearDraftOpinion
                "\"ISSUED_EID\" TEXT," + // 8: issuedEid
                "\"ISSUED_ISAPPROVED\" INTEGER NOT NULL ," + // 9: issuedIsapproved
                "\"ISSUED_OPINION\" TEXT," + // 10: issuedOpinion
                "\"ORDERBY\" INTEGER NOT NULL ," + // 11: orderby
                "\"CREATETIME\" INTEGER NOT NULL ," + // 12: createtime
                "\"UPDATETIME\" INTEGER NOT NULL );"); // 13: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFICIAL_DOCUMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OfficialDocument entity) {
        stmt.clearBindings();
 
        String odid = entity.getOdid();
        if (odid != null) {
            stmt.bindString(1, odid);
        }
 
        String draftEid = entity.getDraftEid();
        if (draftEid != null) {
            stmt.bindString(2, draftEid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(4, fid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String nuclearDraftEid = entity.getNuclearDraftEid();
        if (nuclearDraftEid != null) {
            stmt.bindString(6, nuclearDraftEid);
        }
        stmt.bindLong(7, entity.getNuclearDraftIsapproved());
 
        String nuclearDraftOpinion = entity.getNuclearDraftOpinion();
        if (nuclearDraftOpinion != null) {
            stmt.bindString(8, nuclearDraftOpinion);
        }
 
        String issuedEid = entity.getIssuedEid();
        if (issuedEid != null) {
            stmt.bindString(9, issuedEid);
        }
        stmt.bindLong(10, entity.getIssuedIsapproved());
 
        String issuedOpinion = entity.getIssuedOpinion();
        if (issuedOpinion != null) {
            stmt.bindString(11, issuedOpinion);
        }
        stmt.bindLong(12, entity.getOrderby());
        stmt.bindLong(13, entity.getCreatetime());
        stmt.bindLong(14, entity.getUpdatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OfficialDocument entity) {
        stmt.clearBindings();
 
        String odid = entity.getOdid();
        if (odid != null) {
            stmt.bindString(1, odid);
        }
 
        String draftEid = entity.getDraftEid();
        if (draftEid != null) {
            stmt.bindString(2, draftEid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(4, fid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String nuclearDraftEid = entity.getNuclearDraftEid();
        if (nuclearDraftEid != null) {
            stmt.bindString(6, nuclearDraftEid);
        }
        stmt.bindLong(7, entity.getNuclearDraftIsapproved());
 
        String nuclearDraftOpinion = entity.getNuclearDraftOpinion();
        if (nuclearDraftOpinion != null) {
            stmt.bindString(8, nuclearDraftOpinion);
        }
 
        String issuedEid = entity.getIssuedEid();
        if (issuedEid != null) {
            stmt.bindString(9, issuedEid);
        }
        stmt.bindLong(10, entity.getIssuedIsapproved());
 
        String issuedOpinion = entity.getIssuedOpinion();
        if (issuedOpinion != null) {
            stmt.bindString(11, issuedOpinion);
        }
        stmt.bindLong(12, entity.getOrderby());
        stmt.bindLong(13, entity.getCreatetime());
        stmt.bindLong(14, entity.getUpdatetime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OfficialDocument readEntity(Cursor cursor, int offset) {
        OfficialDocument entity = new OfficialDocument( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // odid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // draftEid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nuclearDraftEid
            cursor.getInt(offset + 6), // nuclearDraftIsapproved
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nuclearDraftOpinion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // issuedEid
            cursor.getInt(offset + 9), // issuedIsapproved
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // issuedOpinion
            cursor.getInt(offset + 11), // orderby
            cursor.getLong(offset + 12), // createtime
            cursor.getLong(offset + 13) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OfficialDocument entity, int offset) {
        entity.setOdid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDraftEid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNuclearDraftEid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNuclearDraftIsapproved(cursor.getInt(offset + 6));
        entity.setNuclearDraftOpinion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIssuedEid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIssuedIsapproved(cursor.getInt(offset + 9));
        entity.setIssuedOpinion(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrderby(cursor.getInt(offset + 11));
        entity.setCreatetime(cursor.getLong(offset + 12));
        entity.setUpdatetime(cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OfficialDocument entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OfficialDocument entity) {
        return null;
    }

    @Override
    public boolean hasKey(OfficialDocument entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
