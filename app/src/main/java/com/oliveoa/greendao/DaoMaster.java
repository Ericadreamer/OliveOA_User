package com.oliveoa.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AnnouncementApprovedOpinionListDao.createTable(db, ifNotExists);
        AnnouncementInfoDao.createTable(db, ifNotExists);
        ApplicationDao.createTable(db, ifNotExists);
        BusinessTripApplicationDao.createTable(db, ifNotExists);
        BusinessTripApplicationApprovedOpinionListDao.createTable(db, ifNotExists);
        ContactInfoDao.createTable(db, ifNotExists);
        DepartmentInfoDao.createTable(db, ifNotExists);
        DutyInfoDao.createTable(db, ifNotExists);
        IssueWorkDao.createTable(db, ifNotExists);
        LeaveApplicationDao.createTable(db, ifNotExists);
        LeaveApplicationApprovedOpinionListDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        OvertimeApplicationDao.createTable(db, ifNotExists);
        OvertimeApplicationApprovedOpinionListDao.createTable(db, ifNotExists);
        UserLoginInfoDao.createTable(db, ifNotExists);
        WorkDetailDao.createTable(db, ifNotExists);
        FulltimeApplicationDao.createTable(db, ifNotExists);
        FulltimeApplicationApprovedOpinionDao.createTable(db, ifNotExists);
        IssueWorkMemberDao.createTable(db, ifNotExists);
        JobTransferApplicationDao.createTable(db, ifNotExists);
        JobTransferApplicationApprovedOpinionDao.createTable(db, ifNotExists);
        LeaveOfficeApplicationDao.createTable(db, ifNotExists);
        LeaveOfficeApplicationApprovedOpinionDao.createTable(db, ifNotExists);
        MeetingApplicationDao.createTable(db, ifNotExists);
        MeetingMemberDao.createTable(db, ifNotExists);
        RecruitmentApplicationApprovedOpinionDao.createTable(db, ifNotExists);
        RecruitmentApplicationItemDao.createTable(db, ifNotExists);
        SubmitWorkDao.createTable(db, ifNotExists);
        ApproveNumberDao.createTable(db, ifNotExists);
        DepartmentAndDutyDao.createTable(db, ifNotExists);
        MeetingApplicationAndStatusDao.createTable(db, ifNotExists);
        NoteInfoDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AnnouncementApprovedOpinionListDao.dropTable(db, ifExists);
        AnnouncementInfoDao.dropTable(db, ifExists);
        ApplicationDao.dropTable(db, ifExists);
        BusinessTripApplicationDao.dropTable(db, ifExists);
        BusinessTripApplicationApprovedOpinionListDao.dropTable(db, ifExists);
        ContactInfoDao.dropTable(db, ifExists);
        DepartmentInfoDao.dropTable(db, ifExists);
        DutyInfoDao.dropTable(db, ifExists);
        IssueWorkDao.dropTable(db, ifExists);
        LeaveApplicationDao.dropTable(db, ifExists);
        LeaveApplicationApprovedOpinionListDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        OvertimeApplicationDao.dropTable(db, ifExists);
        OvertimeApplicationApprovedOpinionListDao.dropTable(db, ifExists);
        UserLoginInfoDao.dropTable(db, ifExists);
        WorkDetailDao.dropTable(db, ifExists);
        FulltimeApplicationDao.dropTable(db, ifExists);
        FulltimeApplicationApprovedOpinionDao.dropTable(db, ifExists);
        IssueWorkMemberDao.dropTable(db, ifExists);
        JobTransferApplicationDao.dropTable(db, ifExists);
        JobTransferApplicationApprovedOpinionDao.dropTable(db, ifExists);
        LeaveOfficeApplicationDao.dropTable(db, ifExists);
        LeaveOfficeApplicationApprovedOpinionDao.dropTable(db, ifExists);
        MeetingApplicationDao.dropTable(db, ifExists);
        MeetingMemberDao.dropTable(db, ifExists);
        RecruitmentApplicationApprovedOpinionDao.dropTable(db, ifExists);
        RecruitmentApplicationItemDao.dropTable(db, ifExists);
        SubmitWorkDao.dropTable(db, ifExists);
        ApproveNumberDao.dropTable(db, ifExists);
        DepartmentAndDutyDao.dropTable(db, ifExists);
        MeetingApplicationAndStatusDao.dropTable(db, ifExists);
        NoteInfoDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AnnouncementApprovedOpinionListDao.class);
        registerDaoClass(AnnouncementInfoDao.class);
        registerDaoClass(ApplicationDao.class);
        registerDaoClass(BusinessTripApplicationDao.class);
        registerDaoClass(BusinessTripApplicationApprovedOpinionListDao.class);
        registerDaoClass(ContactInfoDao.class);
        registerDaoClass(DepartmentInfoDao.class);
        registerDaoClass(DutyInfoDao.class);
        registerDaoClass(IssueWorkDao.class);
        registerDaoClass(LeaveApplicationDao.class);
        registerDaoClass(LeaveApplicationApprovedOpinionListDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(OvertimeApplicationDao.class);
        registerDaoClass(OvertimeApplicationApprovedOpinionListDao.class);
        registerDaoClass(UserLoginInfoDao.class);
        registerDaoClass(WorkDetailDao.class);
        registerDaoClass(FulltimeApplicationDao.class);
        registerDaoClass(FulltimeApplicationApprovedOpinionDao.class);
        registerDaoClass(IssueWorkMemberDao.class);
        registerDaoClass(JobTransferApplicationDao.class);
        registerDaoClass(JobTransferApplicationApprovedOpinionDao.class);
        registerDaoClass(LeaveOfficeApplicationDao.class);
        registerDaoClass(LeaveOfficeApplicationApprovedOpinionDao.class);
        registerDaoClass(MeetingApplicationDao.class);
        registerDaoClass(MeetingMemberDao.class);
        registerDaoClass(RecruitmentApplicationApprovedOpinionDao.class);
        registerDaoClass(RecruitmentApplicationItemDao.class);
        registerDaoClass(SubmitWorkDao.class);
        registerDaoClass(ApproveNumberDao.class);
        registerDaoClass(DepartmentAndDutyDao.class);
        registerDaoClass(MeetingApplicationAndStatusDao.class);
        registerDaoClass(NoteInfoDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
